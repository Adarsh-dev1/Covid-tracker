{"version":3,"sources":["Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","App.module.css","Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","index.js"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailydata","total","date","reportDate","fetchCountries","countries","name","Charts","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchApi","FormControl","formcontrol","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","fetchdData","this","Chart","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80384042.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1vKlh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1BhzZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1pmkm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__10ZSL\",\"card\":\"Cards_card__2UEUL\",\"infected\":\"Cards_infected__CoyOz\",\"recovered\":\"Cards_recovered__3vn-s\",\"deaths\":\"Cards_deaths__zN12y\"};","import React from 'react';\r\nimport{Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nconst Cards=({data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n\r\n    if(!confirmed){\r\n                return('Loading')\r\n            }\r\n\r\n    \r\n    return(\r\n        <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected )}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp\r\n                    start={0}\r\n                    end={confirmed.value}\r\n                    duration={2.5}\r\n                    seperator=\",\"\r\n                />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number Of Active Cases Of COVID-19</Typography>\r\n        </CardContent>\r\n\r\n        </Grid>\r\n\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered )}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n            <CountUp\r\n                    start={0}\r\n                    end={recovered.value}\r\n                    duration={2.5}\r\n                    seperator=\",\"\r\n                /></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number Of Recovered Cases Of COVID-19</Typography>\r\n        </CardContent>\r\n\r\n        </Grid>\r\n\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths )}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n            <CountUp\r\n                    start={0}\r\n                    end={deaths.value}\r\n                    duration={2.5}\r\n                    seperator=\",\"\r\n                /></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number Of Deaths Caused By COVID-19</Typography>\r\n        </CardContent>\r\n\r\n        </Grid>\r\n\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards"," import axios from 'axios';\r\n\r\n const url='https://covid19.mathdro.id/api';\r\n\r\n export const fetchData = async(country)=>{\r\n     let changeableUrl=url;\r\n     if(country){\r\n         changeableUrl=`${url}/countries/${country}`\r\n     }\r\n     try {\r\n         const {data: {confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeableUrl);\r\n\r\n         return{confirmed,recovered,deaths, lastUpdate};\r\n\r\n         \r\n         \r\n\r\n     } catch (error) {\r\n         console.log(error)\r\n         \r\n     }\r\n }\r\n\r\n export const fetchDailyData = async ()=>{\r\n     try {\r\n         const {data} = await axios.get(`${url}/daily`);\r\n         const modifiedData=data.map((dailydata)=>({\r\n             confirmed: dailydata.confirmed.total,\r\n             deaths:dailydata.deaths.total,\r\n             date:dailydata.reportDate,\r\n         }));\r\n         console.log(modifiedData.confirmed)\r\n         return modifiedData\r\n     } catch (error) {\r\n         console.log(error)\r\n         \r\n     }\r\n }\r\n\r\n\r\n// export const fetchDailyData = async () => {\r\n//   try {\r\n//     const { data } = await axios.get(`${url}/daily`);\r\n\r\n//     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n//   } catch (error) {\r\n//     return error;\r\n//   }\r\n// };\r\n\r\n\r\nexport const fetchCountries = async () =>{\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`)\r\n        return countries.map((country)=> country.name)\r\n        console.log(countries)\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n","import React, {useState,useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport{Line,Bar} from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\n\r\nconst Charts=({data:{confirmed,deaths,recovered},country})=>{\r\n    const[dailyData,setDailyData]= useState([])\r\n\r\n    useEffect(()=>{\r\n\r\n        const fetchAPI = async ()=>{\r\n            setDailyData( await fetchDailyData());\r\n        }\r\n        console.log(dailyData)\r\n            fetchAPI();\r\n    },[]);\r\n\r\n    // useEffect(() => {\r\n    //     const fetchMyAPI = async () => {\r\n    //       const initialDailyData = await fetchDailyData();\r\n    \r\n    //       setDailyData(initialDailyData);\r\n    //     };\r\n    \r\n    //     fetchMyAPI();\r\n    //   }, []);\r\n\r\n    const lineChart=(\r\n       \r\n        dailyData.length\r\n        ?(  \r\n        <Line\r\n            data={{\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    data: dailyData.map(({confirmed})=>confirmed),\r\n                    label:'Infected',\r\n                    borderColor:'#3333ff',\r\n                    fill:true,\r\n                },{\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label:'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill:true,\r\n                }],\r\n            }}\r\n        />):null\r\n    );\r\n    console.log(confirmed,recovered,deaths)\r\n\r\n//     const barChart = (\r\n//     confirmed ? (\r\n//       <Bar\r\n//         data={{\r\n//           labels: ['Infected', 'Recovered', 'Deaths'],\r\n//           datasets: [\r\n//             {\r\n//               label: 'People',\r\n//               backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n//               data: [confirmed.value, recovered.value, deaths.value],\r\n//             },\r\n//           ],\r\n//         }}\r\n//         options={{\r\n//           legend: { display: false },\r\n//           title: { display: true, text: `Current state in ${country}` },\r\n//         }}\r\n//       />\r\n//     ) : null\r\n//   );\r\n\r\n\r\nconst barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  \r\n    return(\r\n        <div className={styles.container}>\r\n        {country? barChart:lineChart}\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Charts","import React, {useState,useEffect} from 'react';\r\nimport { NativeSelect,FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css'\r\nimport { fetchCountries} from '../../api';\r\n\r\n\r\n\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const [fetchedCountries,setFetchedCountries]=useState([]);\r\n    useEffect(() => {\r\n        const fetchApi = async ()=>{\r\n        setFetchedCountries(await fetchCountries());\r\n\r\n        }\r\n        fetchApi()\r\n    }, [setFetchedCountries])\r\n    \r\n    return(\r\n        <FormControl className={styles.formcontrol}>\r\n            <NativeSelect defaultValue='' onChange={(e)=> handleCountryChange(e.target.value)}>\r\n                <option value=''>Global</option>\r\n                {fetchedCountries.map((country,i)=> <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n        \r\n    )\r\n}\r\nexport default CountryPicker","import React from 'react';\r\nimport {Cards,Chart,CountryPicker} from './Components'\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api'\r\nimport {Typography} from '@material-ui/core'\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    state={\r\n        data:{},\r\n        country:'',\r\n    }\r\n\r\n   \r\n\r\n\r\n\r\n    async componentDidMount(){\r\n        const fetchdData = await fetchData();\r\n        this.setState({data: fetchdData});\r\n        \r\n    }\r\n\r\n    handleCountryChange = async(country)=>{\r\n        \r\n        const fetchedData= await fetchData(country);\r\n        this.setState({data:fetchedData,country:country});\r\n        \r\n        \r\n    }\r\n    render() {\r\n\r\n        const{data,country}=this.state;\r\n        return (\r\n             <div className={styles.container}>\r\n             <Typography>COVID TRACKER</Typography>\r\n             <Cards data={data}/>\r\n             <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n             <Chart data={data} country={country}/>\r\n             \r\n             </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}